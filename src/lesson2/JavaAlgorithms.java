package lesson2;

import kotlin.NotImplementedError;
import kotlin.Pair;

import static java.lang.Math.sqrt;

@SuppressWarnings("unused")
public class JavaAlgorithms {
    /**
     * Получение наибольшей прибыли (она же -- поиск максимального подмассива)
     * Простая
     * <p>
     * Во входном файле с именем inputName перечислены цены на акции компании в различные (возрастающие) моменты времени
     * (каждая цена идёт с новой строки). Цена -- это целое положительное число. Пример:
     * <p>
     * 201
     * 196
     * 190
     * 198
     * 187
     * 194
     * 193
     * 185
     * <p>
     * Выбрать два момента времени, первый из них для покупки акций, а второй для продажи, с тем, чтобы разница
     * между ценой продажи и ценой покупки была максимально большой. Второй момент должен быть раньше первого.
     * Вернуть пару из двух моментов.
     * Каждый момент обозначается целым числом -- номер строки во входном файле, нумерация с единицы.
     * Например, для приведённого выше файла результат должен быть Pair(3, 4)
     * <p>
     * В случае обнаружения неверного формата файла бросить любое исключение.
     */
    static public Pair<Integer, Integer> optimizeBuyAndSell(String inputName) {
        throw new NotImplementedError();
    }

    /**
     * Задача Иосифа Флафия.
     * Простая
     * <p>
     * Образовав круг, стоят menNumber человек, пронумерованных от 1 до menNumber.
     * <p>
     * 1 2 3
     * 8   4
     * 7 6 5
     * <p>
     * Мы считаем от 1 до choiceInterval (например, до 5), начиная с 1-го человека по кругу.
     * Человек, на котором остановился счёт, выбывает.
     * <p>
     * 1 2 3
     * 8   4
     * 7 6 х
     * <p>
     * Далее счёт продолжается со следующего человека, также от 1 до choiceInterval.
     * Выбывшие при счёте пропускаются, и человек, на котором остановился счёт, выбывает.
     * <p>
     * 1 х 3
     * 8   4
     * 7 6 Х
     * <p>
     * Процедура повторяется, пока не останется один человек. Требуется вернуть его номер (в данном случае 3).
     * <p>
     * 1 Х 3
     * х   4
     * 7 6 Х
     * <p>
     * 1 Х 3
     * Х   4
     * х 6 Х
     * <p>
     * х Х 3
     * Х   4
     * Х 6 Х
     * <p>
     * Х Х 3
     * Х   х
     * Х 6 Х
     * <p>
     * Х Х 3
     * Х   Х
     * Х х Х
     * <p>
     * Общий комментарий: решение из Википедии для этой задачи принимается,
     * но приветствуется попытка решить её самостоятельно.
     */
    static public int josephTask(int menNumber, int choiceInterval) {
        throw new NotImplementedError();
    }

    /**
     * Наибольшая общая подстрока.
     * Средняя
     * <p>
     * Дано две строки, например ОБСЕРВАТОРИЯ и КОНСЕРВАТОРЫ.
     * Найти их самую длинную общую подстроку -- в примере это СЕРВАТОР.
     * Если общих подстрок нет, вернуть пустую строку.
     * При сравнении подстрок, регистр символов *имеет* значение.
     * Если имеется несколько самых длинных общих подстрок одной длины,
     * вернуть ту из них, которая встречается раньше в строке first.
     */
    // Время: O(N*M)
    // Память: S(1)
    static public String longestCommonSubstring(String first, String second) {
        String res = "";
        int max = 0;
        int iMax = first.length();
        int count = 0;
        // В решении используется таблица, в которой элементы проверяются по диагонали
        // Проверяем элементы главной диагонали и ниже, где i - индекс в первой строке, i+j - во второй
        // j - это сдвиг, с которым проверяется совпадение букв
        int i = 0;
        int j = 0;
        while (j < second.length()) {
            while (i < first.length() && i + j < second.length()) {
                if (first.charAt(i) == second.charAt(j + i)) {
                    count++;
                    if (count == max && i < iMax)
                        iMax = i;
                    if (count > max) {
                        max = count;
                        iMax = i;
                    }
                } else count = 0;
                i++;
            }
            // Снова проходим по первой строке но с другим сдвигом
            i = 0;
            j++;
        }
        // Проверяем элементы выше главной диагонали, где j - индекс во второй строке, i+j - в первой
        // i - это сдвиг, с которым проверяется совпадение букв
        j = 0;
        i = 1;
        while (i < first.length()) {
            while (j < second.length() && i + j < first.length()) {
                if (second.charAt(j) == first.charAt(i + j)) {
                    count++;
                    if (count == max && i + j < iMax)
                        iMax = i + j;
                    if (count > max) {
                        max = count;
                        iMax = i + j;
                    }
                } else count = 0;
                j++;
            }
            // Снова проходим по второй строке но с другим сдвигом
            j = 0;
            i++;
        }
        if (max != 0) res = first.substring(iMax - max + 1, iMax + 1);
        return res;
    }

    /**
     * Число простых чисел в интервале
     * Простая
     * <p>
     * Рассчитать количество простых чисел в интервале от 1 до limit (включительно).
     * Если limit <= 1, вернуть результат 0.
     * <p>
     * Справка: простым считается число, которое делится нацело только на 1 и на себя.
     * Единица простым числом не считается.
     */
    // Время: O(N*log(log(N)))
    // Память: S(N)
    static public int calcPrimesNumber(int limit) {
        if (limit <= 1) return 0;
        boolean[] composite = new boolean[limit + 1];
        int count = 0;
        int prime = 2;
        while (prime <= sqrt(limit)) {
            if (!composite[prime]) {
                for (int i = prime * prime; i <= limit; i += prime) {
                    composite[i] = true;
                }
            }
            prime++;
        }
        for (int i = 2; i <= limit; i++)
            if (!composite[i]) count++;
        return count;
    }
}
